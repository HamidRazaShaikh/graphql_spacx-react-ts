{"version":3,"sources":["generated/graphql.tsx","components/Mission/MissionsList.tsx","components/MissionInfo/index.tsx","components/Mission/loading.tsx","components/Mission/index.tsx","App.tsx","config.js","index.tsx","swDev.ts"],"names":["CapsuleRange","LaunchRange","Order","CacheControlScope","LaunchesInfoDocument","gql","MissionInfoDocument","MissionList","data","handlePassId","className","InputGroup","DropdownButton","as","Prepend","title","variant","id","launches","map","launchObj","key","Dropdown","Item","href","onClick","mission_name","MissionDetail","baseOptions","variables","String","Apollo","error","loading","style","display","justifyContent","alignItems","marginTop","Spinner","animation","height","width","color","info","launch","Card","border","bg","Header","launch_year","launch_site","site_name","rocket","rocket_name","rocket_type","Body","Title","Text","details","imageUrl","links","flickr_images","length","Carousel","margin","slide","fade","url","src","alt","padding","Caption","images","Loading","position","MissionsContainer","useState","setId","MissionsList","newId","SpacexApp","Container","fluid","Row","Col","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","nav","navigator","swDev","process","console","log","serviceWorker","register","then","result","catch","err"],"mappings":"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","file":"static/js/main.14600c89.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  capsule?: Maybe<Capsule>;\n  capsules?: Maybe<Array<Maybe<Capsule>>>;\n  core?: Maybe<Core>;\n  cores?: Maybe<Array<Maybe<Core>>>;\n  dragon?: Maybe<Dragon>;\n  dragons?: Maybe<Array<Maybe<Dragon>>>;\n  history?: Maybe<Array<Maybe<History>>>;\n  info?: Maybe<Info>;\n  landingpad?: Maybe<Landingpad>;\n  landingpads?: Maybe<Array<Maybe<Landingpad>>>;\n  launch?: Maybe<Launch>;\n  launches?: Maybe<Array<Maybe<Launch>>>;\n  launchpad?: Maybe<Launchpad>;\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>;\n  mission?: Maybe<Mission>;\n  missions?: Maybe<Array<Maybe<Mission>>>;\n  payload?: Maybe<Payload>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n  roadster?: Maybe<Roadster>;\n  rocket?: Maybe<Rocket>;\n  rockets?: Maybe<Array<Maybe<Rocket>>>;\n  ship?: Maybe<Ship>;\n  ships?: Maybe<Array<Maybe<Ship>>>;\n};\n\n\nexport type QueryCapsuleArgs = {\n  capsule_serial: Scalars['String'];\n};\n\n\nexport type QueryCapsulesArgs = {\n  range?: Maybe<CapsuleRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCoreArgs = {\n  core_serial: Scalars['String'];\n};\n\n\nexport type QueryCoresArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryHistoryArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLaunchArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLaunchesArgs = {\n  range?: Maybe<LaunchRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryMissionsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPayloadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryShipsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\nexport enum CapsuleRange {\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum LaunchRange {\n  Latest = 'latest',\n  Next = 'next',\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum Order {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type BasicMission = {\n  __typename?: 'BasicMission';\n  name?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n};\n\nexport type Capsule = {\n  __typename?: 'Capsule';\n  capsule_serial?: Maybe<Scalars['String']>;\n  capsule_id?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  landings?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  reuse_count?: Maybe<Scalars['Int']>;\n};\n\nexport type Core = {\n  __typename?: 'Core';\n  core_serial?: Maybe<Scalars['String']>;\n  block?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  reuse_count?: Maybe<Scalars['Int']>;\n  rtls_attempts?: Maybe<Scalars['Int']>;\n  rtls_landings?: Maybe<Scalars['Int']>;\n  asds_attempts?: Maybe<Scalars['Int']>;\n  asds_landings?: Maybe<Scalars['Int']>;\n  water_landing?: Maybe<Scalars['Boolean']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Dimension = {\n  __typename?: 'Dimension';\n  meters?: Maybe<Scalars['Float']>;\n  feet?: Maybe<Scalars['Float']>;\n};\n\nexport type Dragon = {\n  __typename?: 'Dragon';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  active?: Maybe<Scalars['Boolean']>;\n  crew_capacity?: Maybe<Scalars['Int']>;\n  sidewall_angle_deg?: Maybe<Scalars['Int']>;\n  orbit_duration_yr?: Maybe<Scalars['Int']>;\n  dry_mass_kg?: Maybe<Scalars['Int']>;\n  dry_mass_lb?: Maybe<Scalars['Int']>;\n  first_flight?: Maybe<Scalars['String']>;\n  heat_shield?: Maybe<HeatShield>;\n  thrusters?: Maybe<Array<Maybe<Thruster>>>;\n  launch_payload_mass?: Maybe<Mass>;\n  launch_payload_vol?: Maybe<PayloadVolume>;\n  return_payload_mass?: Maybe<Mass>;\n  return_payload_vol?: Maybe<PayloadVolume>;\n  pressurized_capsule?: Maybe<PressurizedCapsule>;\n  trunk?: Maybe<Trunk>;\n  height_w_trunk?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Engines = {\n  __typename?: 'Engines';\n  number?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  layout?: Maybe<Scalars['String']>;\n  engine_loss_max?: Maybe<Scalars['Int']>;\n  propellant_1?: Maybe<Scalars['String']>;\n  propellant_2?: Maybe<Scalars['String']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n  thrust_to_weight?: Maybe<Scalars['Float']>;\n};\n\nexport type Fairing = {\n  __typename?: 'Fairing';\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n};\n\nexport type Headquarters = {\n  __typename?: 'Headquarters';\n  address?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n};\n\nexport type HeatShield = {\n  __typename?: 'HeatShield';\n  material?: Maybe<Scalars['String']>;\n  size_meters?: Maybe<Scalars['Float']>;\n  temp_degrees?: Maybe<Scalars['Int']>;\n  dev_partner?: Maybe<Scalars['String']>;\n};\n\nexport type History = {\n  __typename?: 'History';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  event_date_utc?: Maybe<Scalars['String']>;\n  event_date_unix?: Maybe<Scalars['Float']>;\n  flight_number?: Maybe<Scalars['Int']>;\n  details?: Maybe<Scalars['String']>;\n  links?: Maybe<HistoryLinks>;\n};\n\nexport type HistoryLinks = {\n  __typename?: 'HistoryLinks';\n  article?: Maybe<Scalars['String']>;\n  reddit?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n};\n\nexport type Info = {\n  __typename?: 'Info';\n  name?: Maybe<Scalars['String']>;\n  founder?: Maybe<Scalars['String']>;\n  founded?: Maybe<Scalars['Int']>;\n  employees?: Maybe<Scalars['Int']>;\n  vehicles?: Maybe<Scalars['Int']>;\n  launch_sites?: Maybe<Scalars['Int']>;\n  test_sites?: Maybe<Scalars['Int']>;\n  ceo?: Maybe<Scalars['String']>;\n  cto?: Maybe<Scalars['String']>;\n  coo?: Maybe<Scalars['String']>;\n  cto_propulsion?: Maybe<Scalars['String']>;\n  valuation?: Maybe<Scalars['Float']>;\n  headquarters?: Maybe<Headquarters>;\n  summary?: Maybe<Scalars['String']>;\n};\n\nexport type LandingLegs = {\n  __typename?: 'LandingLegs';\n  number?: Maybe<Scalars['Int']>;\n  material?: Maybe<Scalars['String']>;\n};\n\nexport type Landingpad = {\n  __typename?: 'Landingpad';\n  id?: Maybe<Scalars['String']>;\n  full_name?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  landing_type?: Maybe<Scalars['String']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Launch = {\n  __typename?: 'Launch';\n  flight_number?: Maybe<Scalars['Int']>;\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  mission_name?: Maybe<Scalars['String']>;\n  launch_year?: Maybe<Scalars['Int']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_local?: Maybe<Scalars['String']>;\n  is_tentative?: Maybe<Scalars['Boolean']>;\n  tentative_max_precision?: Maybe<Scalars['String']>;\n  tbd?: Maybe<Scalars['Boolean']>;\n  launch_window?: Maybe<Scalars['Int']>;\n  rocket?: Maybe<LaunchRocket>;\n  ships?: Maybe<Array<Maybe<Scalars['String']>>>;\n  telemetry?: Maybe<LaunchTelemetry>;\n  launch_site?: Maybe<LaunchSite>;\n  launch_success?: Maybe<Scalars['Boolean']>;\n  links?: Maybe<LaunchLinks>;\n  details?: Maybe<Scalars['String']>;\n  upcoming?: Maybe<Scalars['Boolean']>;\n  static_fire_date_utc?: Maybe<Scalars['String']>;\n  static_fire_date_unix?: Maybe<Scalars['Float']>;\n  timeline?: Maybe<LaunchTimeline>;\n};\n\nexport type LaunchLinks = {\n  __typename?: 'LaunchLinks';\n  mission_patch?: Maybe<Scalars['String']>;\n  mission_patch_small?: Maybe<Scalars['String']>;\n  reddit_campaign?: Maybe<Scalars['String']>;\n  reddit_launch?: Maybe<Scalars['String']>;\n  reddit_recovery?: Maybe<Scalars['String']>;\n  reddit_media?: Maybe<Scalars['String']>;\n  presskit?: Maybe<Scalars['String']>;\n  article_link?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  video_link?: Maybe<Scalars['String']>;\n  youtube_id?: Maybe<Scalars['String']>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type Launchpad = {\n  __typename?: 'Launchpad';\n  id?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  vehicles_launched?: Maybe<Array<Maybe<Scalars['String']>>>;\n  attempted_launches?: Maybe<Scalars['Int']>;\n  successful_launches?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  site_id?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocket = {\n  __typename?: 'LaunchRocket';\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n  first_stage?: Maybe<LaunchRocketFirstStage>;\n  second_stage?: Maybe<LaunchRocketSecondStage>;\n  fairings?: Maybe<LaunchRocketFairings>;\n};\n\nexport type LaunchRocketFairings = {\n  __typename?: 'LaunchRocketFairings';\n  reused?: Maybe<Scalars['Boolean']>;\n  recovery_attempt?: Maybe<Scalars['Boolean']>;\n  recovered?: Maybe<Scalars['Boolean']>;\n  ship?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketFirstStage = {\n  __typename?: 'LaunchRocketFirstStage';\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>;\n};\n\nexport type LaunchRocketFirstStageCore = {\n  __typename?: 'LaunchRocketFirstStageCore';\n  core_serial?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n  block?: Maybe<Scalars['Int']>;\n  gridfins?: Maybe<Scalars['Boolean']>;\n  legs?: Maybe<Scalars['Boolean']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  land_success?: Maybe<Scalars['Boolean']>;\n  landing_intent?: Maybe<Scalars['Boolean']>;\n  landing_type?: Maybe<Scalars['String']>;\n  landing_vehicle?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketSecondStage = {\n  __typename?: 'LaunchRocketSecondStage';\n  block?: Maybe<Scalars['Int']>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n};\n\nexport type LaunchSite = {\n  __typename?: 'LaunchSite';\n  site_id?: Maybe<Scalars['String']>;\n  site_name?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTelemetry = {\n  __typename?: 'LaunchTelemetry';\n  flight_club?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTimeline = {\n  __typename?: 'LaunchTimeline';\n  webcast_liftoff?: Maybe<Scalars['Int']>;\n  go_for_prop_loading?: Maybe<Scalars['Int']>;\n  rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_lox_loading?: Maybe<Scalars['Int']>;\n  stage2_rp1_loading?: Maybe<Scalars['Int']>;\n  stage2_lox_loading?: Maybe<Scalars['Int']>;\n  engine_chill?: Maybe<Scalars['Int']>;\n  prelaunch_checks?: Maybe<Scalars['Int']>;\n  propellant_pressurization?: Maybe<Scalars['Int']>;\n  go_for_launch?: Maybe<Scalars['Int']>;\n  ignition?: Maybe<Scalars['Int']>;\n  liftoff?: Maybe<Scalars['Int']>;\n  maxq?: Maybe<Scalars['Int']>;\n  beco?: Maybe<Scalars['Int']>;\n  side_core_sep?: Maybe<Scalars['Int']>;\n  side_core_boostback?: Maybe<Scalars['Int']>;\n  meco?: Maybe<Scalars['Int']>;\n  stage_sep?: Maybe<Scalars['Int']>;\n  center_stage_sep?: Maybe<Scalars['Int']>;\n  second_stage_ignition?: Maybe<Scalars['Int']>;\n  center_core_boostback?: Maybe<Scalars['Int']>;\n  fairing_deploy?: Maybe<Scalars['Int']>;\n  first_stage_entry_burn?: Maybe<Scalars['Int']>;\n  side_core_entry_burn?: Maybe<Scalars['Int']>;\n  center_core_entry_burn?: Maybe<Scalars['Int']>;\n  seco_1?: Maybe<Scalars['Int']>;\n  first_stage_landing_burn?: Maybe<Scalars['Int']>;\n  first_stage_landing?: Maybe<Scalars['Int']>;\n  side_core_landing?: Maybe<Scalars['Int']>;\n  center_core_landing?: Maybe<Scalars['Int']>;\n  second_stage_restart?: Maybe<Scalars['Int']>;\n  seco_2?: Maybe<Scalars['Int']>;\n  payload_deploy?: Maybe<Scalars['Int']>;\n  payload_deploy_1?: Maybe<Scalars['Int']>;\n  payload_deploy_2?: Maybe<Scalars['Int']>;\n  dragon_separation?: Maybe<Scalars['Int']>;\n  dragon_solar_deploy?: Maybe<Scalars['Int']>;\n  dragon_bay_door_deploy?: Maybe<Scalars['Int']>;\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  name?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type Mass = {\n  __typename?: 'Mass';\n  kg?: Maybe<Scalars['Int']>;\n  lb?: Maybe<Scalars['Int']>;\n};\n\nexport type Mission = {\n  __typename?: 'Mission';\n  mission_name?: Maybe<Scalars['String']>;\n  mission_id?: Maybe<Scalars['String']>;\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  payload_ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Payload = {\n  __typename?: 'Payload';\n  payload_id?: Maybe<Scalars['String']>;\n  norad_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  cap_serial?: Maybe<Scalars['String']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nationality?: Maybe<Scalars['String']>;\n  manufacturer?: Maybe<Scalars['String']>;\n  payload_type?: Maybe<Scalars['String']>;\n  payload_mass_kg?: Maybe<Scalars['Float']>;\n  payload_mass_lbs?: Maybe<Scalars['Float']>;\n  orbit?: Maybe<Scalars['String']>;\n  orbit_params?: Maybe<PayloadOrbitParams>;\n  mass_returned_kg?: Maybe<Scalars['Float']>;\n  mass_returned_lbs?: Maybe<Scalars['Float']>;\n  flight_time_sec?: Maybe<Scalars['Int']>;\n  cargo_manifest?: Maybe<Scalars['String']>;\n};\n\nexport type PayloadOrbitParams = {\n  __typename?: 'PayloadOrbitParams';\n  reference_system?: Maybe<Scalars['String']>;\n  regime?: Maybe<Scalars['String']>;\n  longitude?: Maybe<Scalars['Float']>;\n  semi_major_axis_km?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  periapsis_km?: Maybe<Scalars['Float']>;\n  apoapsis_km?: Maybe<Scalars['Float']>;\n  inclination_deg?: Maybe<Scalars['Float']>;\n  period_min?: Maybe<Scalars['Float']>;\n  lifespan_years?: Maybe<Scalars['Float']>;\n  epoch?: Maybe<Scalars['String']>;\n  mean_motion?: Maybe<Scalars['Float']>;\n  raan?: Maybe<Scalars['Float']>;\n  arg_of_pericenter?: Maybe<Scalars['Float']>;\n  mean_anomaly?: Maybe<Scalars['Float']>;\n};\n\nexport type PayloadVolume = {\n  __typename?: 'PayloadVolume';\n  cubic_meters?: Maybe<Scalars['Int']>;\n  cubic_feet?: Maybe<Scalars['Int']>;\n};\n\nexport type Position = {\n  __typename?: 'Position';\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type PressurizedCapsule = {\n  __typename?: 'PressurizedCapsule';\n  payload_volume?: Maybe<PayloadVolume>;\n};\n\nexport type Roadster = {\n  __typename?: 'Roadster';\n  name: Scalars['String'];\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_mass_kg?: Maybe<Scalars['Int']>;\n  launch_mass_lbs?: Maybe<Scalars['Int']>;\n  norad_id?: Maybe<Scalars['Int']>;\n  epoch_jd?: Maybe<Scalars['Float']>;\n  orbit_type?: Maybe<Scalars['String']>;\n  apoapsis_au?: Maybe<Scalars['Float']>;\n  semi_major_axis_au?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  inclination?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  periapsis_arg?: Maybe<Scalars['Float']>;\n  period_days?: Maybe<Scalars['Float']>;\n  speed_kph?: Maybe<Scalars['Float']>;\n  speed_mph?: Maybe<Scalars['Float']>;\n  earth_distance_km?: Maybe<Scalars['Float']>;\n  earth_distance_mi?: Maybe<Scalars['Float']>;\n  mars_distance_km?: Maybe<Scalars['Float']>;\n  mars_distance_mi?: Maybe<Scalars['Float']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Rocket = {\n  __typename?: 'Rocket';\n  id?: Maybe<Scalars['Int']>;\n  active?: Maybe<Scalars['Boolean']>;\n  stages?: Maybe<Scalars['Int']>;\n  boosters?: Maybe<Scalars['Int']>;\n  cost_per_launch?: Maybe<Scalars['Int']>;\n  success_rate_pct?: Maybe<Scalars['Float']>;\n  first_flight?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  mass?: Maybe<Mass>;\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>;\n  first_stage?: Maybe<RocketFirstStage>;\n  second_stage?: Maybe<RocketSecondStage>;\n  engines?: Maybe<Engines>;\n  landing_legs?: Maybe<LandingLegs>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n};\n\nexport type RocketFirstStage = {\n  __typename?: 'RocketFirstStage';\n  reusable?: Maybe<Scalars['Boolean']>;\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n};\n\nexport type RocketPayload = {\n  __typename?: 'RocketPayload';\n  option_1?: Maybe<Scalars['String']>;\n  option_2?: Maybe<Scalars['String']>;\n  composite_fairing?: Maybe<Fairing>;\n};\n\nexport type RocketPayloadWeight = {\n  __typename?: 'RocketPayloadWeight';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  kg?: Maybe<Scalars['Float']>;\n  lb?: Maybe<Scalars['Float']>;\n};\n\nexport type RocketSecondStage = {\n  __typename?: 'RocketSecondStage';\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust?: Maybe<Thrust>;\n  payloads?: Maybe<RocketPayload>;\n};\n\nexport type Ship = {\n  __typename?: 'Ship';\n  ship_id?: Maybe<Scalars['String']>;\n  ship_name?: Maybe<Scalars['String']>;\n  ship_model?: Maybe<Scalars['String']>;\n  ship_type?: Maybe<Scalars['String']>;\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>;\n  active?: Maybe<Scalars['Boolean']>;\n  imo?: Maybe<Scalars['Int']>;\n  mmsi?: Maybe<Scalars['Int']>;\n  abs?: Maybe<Scalars['Int']>;\n  class?: Maybe<Scalars['Int']>;\n  weight_lbs?: Maybe<Scalars['Float']>;\n  weight_kg?: Maybe<Scalars['Float']>;\n  year_built?: Maybe<Scalars['Int']>;\n  home_port?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  speed_kn?: Maybe<Scalars['Float']>;\n  course_deg?: Maybe<Scalars['Float']>;\n  position?: Maybe<Position>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  url?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n};\n\nexport type Thrust = {\n  __typename?: 'Thrust';\n  kN?: Maybe<Scalars['Float']>;\n  lbf?: Maybe<Scalars['Float']>;\n};\n\nexport type Thruster = {\n  __typename?: 'Thruster';\n  type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['Int']>;\n  pods?: Maybe<Scalars['Int']>;\n  fuel_1?: Maybe<Scalars['String']>;\n  fuel_2?: Maybe<Scalars['String']>;\n  thrust?: Maybe<Thrust>;\n};\n\nexport type Trunk = {\n  __typename?: 'Trunk';\n  trunk_volume?: Maybe<PayloadVolume>;\n  cargo?: Maybe<TrunkCargo>;\n};\n\nexport type TrunkCargo = {\n  __typename?: 'TrunkCargo';\n  solar_array?: Maybe<Scalars['Int']>;\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type LaunchesInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LaunchesInfoQuery = (\n  { __typename?: 'Query' }\n  & { launches?: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'mission_id' | 'mission_name' | 'launch_year' | 'launch_success'>\n  )>>> }\n);\n\nexport type MissionInfoQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type MissionInfoQuery = (\n  { __typename?: 'Query' }\n  & { launch?: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'mission_name' | 'launch_year' | 'launch_success' | 'details'>\n    & { launch_site?: Maybe<(\n      { __typename?: 'LaunchSite' }\n      & Pick<LaunchSite, 'site_name'>\n    )>, rocket?: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name' | 'rocket_type'>\n    )>, links?: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'flickr_images'>\n    )> }\n  )> }\n);\n\n\nexport const LaunchesInfoDocument = gql`\n    query launchesInfo {\n  launches {\n    mission_id\n    mission_name\n    launch_year\n    launch_success\n  }\n}\n    `;\n\n/**\n * __useLaunchesInfoQuery__\n *\n * To run a query within a React component, call `useLaunchesInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchesInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchesInfoQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLaunchesInfoQuery(baseOptions?: Apollo.QueryHookOptions<LaunchesInfoQuery, LaunchesInfoQueryVariables>) {\n        return Apollo.useQuery<LaunchesInfoQuery, LaunchesInfoQueryVariables>(LaunchesInfoDocument, baseOptions);\n      }\nexport function useLaunchesInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchesInfoQuery, LaunchesInfoQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchesInfoQuery, LaunchesInfoQueryVariables>(LaunchesInfoDocument, baseOptions);\n        }\nexport type LaunchesInfoQueryHookResult = ReturnType<typeof useLaunchesInfoQuery>;\nexport type LaunchesInfoLazyQueryHookResult = ReturnType<typeof useLaunchesInfoLazyQuery>;\nexport type LaunchesInfoQueryResult = Apollo.QueryResult<LaunchesInfoQuery, LaunchesInfoQueryVariables>;\nexport const MissionInfoDocument = gql`\n    query MissionInfo($id: String!) {\n  launch(id: $id) {\n    mission_name\n    launch_year\n    launch_success\n    details\n    launch_site {\n      site_name\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    links {\n      flickr_images\n    }\n  }\n}\n    `;\n\n/**\n * __useMissionInfoQuery__\n *\n * To run a query within a React component, call `useMissionInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useMissionInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMissionInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useMissionInfoQuery(baseOptions: Apollo.QueryHookOptions<MissionInfoQuery, MissionInfoQueryVariables>) {\n        return Apollo.useQuery<MissionInfoQuery, MissionInfoQueryVariables>(MissionInfoDocument, baseOptions);\n      }\nexport function useMissionInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MissionInfoQuery, MissionInfoQueryVariables>) {\n          return Apollo.useLazyQuery<MissionInfoQuery, MissionInfoQueryVariables>(MissionInfoDocument, baseOptions);\n        }\nexport type MissionInfoQueryHookResult = ReturnType<typeof useMissionInfoQuery>;\nexport type MissionInfoLazyQueryHookResult = ReturnType<typeof useMissionInfoLazyQuery>;\nexport type MissionInfoQueryResult = Apollo.QueryResult<MissionInfoQuery, MissionInfoQueryVariables>;","import React from \"react\";\r\nimport { LaunchesInfoQuery } from \"./../../generated/graphql\";\r\n\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport interface idProps {\r\n  handlePassId: (newId: number) => void;\r\n}\r\n\r\ninterface Props extends idProps {\r\n  data: LaunchesInfoQuery;\r\n}\r\n\r\nconst MissionList: React.FC<Props> = ({ data, handlePassId }) => {\r\n  return (\r\n    <div className=\"appBar\">\r\n      <div className=\"nav\">\r\n        <h5>SpaceX-Client-app</h5>\r\n      </div>\r\n\r\n      <div className=\"button\">\r\n        <InputGroup className=\"inputButtton\">\r\n          <DropdownButton\r\n            as={InputGroup.Prepend}\r\n            title=\"Select Mission\"\r\n            variant=\"info\"\r\n            id=\"input-group-dropdown-1\"\r\n          >\r\n            {data.launches?.map((launchObj, id) => {\r\n              let key = id + 1;\r\n\r\n              return (\r\n                <Dropdown.Item\r\n                  className=\"listItem\"\r\n                  href=\"#\"\r\n                  key={id}\r\n                  onClick={() => handlePassId(key)}\r\n                >\r\n                  {launchObj?.mission_name}\r\n                </Dropdown.Item>\r\n              );\r\n            })}\r\n          </DropdownButton>\r\n        </InputGroup>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MissionList;\r\n","import React from \"react\";\r\nimport { useMissionInfoQuery } from \"./../../generated/graphql\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nimport \"./index.css\";\r\n\r\ninterface Props {\r\n  id: number;\r\n}\r\n\r\nconst MissionDetail: React.FC<Props> = ({ id }) => {\r\n  const { data, error, loading } = useMissionInfoQuery({\r\n    variables: { id: String(id) },\r\n  });\r\n\r\n  if (loading)\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          marginTop: 300,\r\n        }}\r\n      >\r\n        <Spinner\r\n          animation=\"border\"\r\n          style={{\r\n            height: 50,\r\n            width: 50,\r\n            color: \"blue\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error || !data)\r\n    return (\r\n      <h5 className=\"error\">\r\n        {\" \"}\r\n        Oops! something went wrong. check your internet conncection.\r\n      </h5>\r\n    );\r\n\r\n  const info = data.launch;\r\n\r\n  const images = () => {\r\n    const imageUrl: any = info?.links?.flickr_images;\r\n\r\n    if (imageUrl.length === 0) {\r\n      return <h6> Images dont exist for this mission. </h6>;\r\n    } else if (info?.links?.flickr_images?.length !== 0) {\r\n      return (\r\n        <Carousel style={{ margin: \"auto\" }} slide={false} fade={false}>\r\n          {imageUrl.map((url: String, id: number) => {\r\n            return (\r\n              <Carousel.Item key={id}>\r\n                <img\r\n                  className=\"d-block w-100\"\r\n                  src={String(url)}\r\n                  alt=\"First slide\"\r\n                  style={{ height: 400, width: 300, padding: 5 }}\r\n                />\r\n                <Carousel.Caption>\r\n                  <h6>slid # {id + 1}</h6>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n            );\r\n          })}\r\n        </Carousel>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card border=\"info\" className=\"main\" bg=\"info\">\r\n        <Card.Header>launch Year : {info?.launch_year}</Card.Header>\r\n        <Card.Header>launch Site : {info?.launch_site?.site_name} </Card.Header>\r\n        <Card.Header>Rocket name : {info?.rocket?.rocket_name} </Card.Header>\r\n        <Card.Header>Rocket type : {info?.rocket?.rocket_type} </Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>{info?.mission_name}</Card.Title>\r\n          <Card.Text>{info?.details}</Card.Text>\r\n          <h5> Gallery </h5>\r\n          <div> {images()}</div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MissionDetail;\r\n","import React from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <div className=\"loading\">\r\n      <h5 className=\"loadingText\"> Welcome to SpaceX-Client-app</h5>\r\n      <Spinner\r\n        animation=\"border\"\r\n        style={{\r\n          height: 100,\r\n          width: 100,\r\n          color: \"blue\",\r\n          position: \"absolute\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useLaunchesInfoQuery } from \"./../../generated/graphql\";\r\nimport MissionsList from \"./MissionsList\";\r\nimport MissionDetail from \"./../MissionInfo/index\";\r\nimport Loading from \"./loading\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst MissionsContainer = () => {\r\n  const [id, setId] = useState(16);\r\n\r\n  const handlePassId = (newId: number) => {\r\n    setId(newId);\r\n  };\r\n\r\n  const { data, error, loading } = useLaunchesInfoQuery();\r\n\r\n  if (loading) return <Loading />;\r\n\r\n  if (error || !data)\r\n    return (\r\n      <h5 className=\"error\">\r\n        {\" \"}\r\n        Oops! something went wrong. check your internet conncection.\r\n      </h5>\r\n    );\r\n\r\n  return (\r\n    <div className=\"mainDiv\">\r\n      <MissionsList data={data} handlePassId={handlePassId} />\r\n      <MissionDetail id={id} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MissionsContainer;\r\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport MissionsContainer from \"./components/Mission/index\";\n\n\nexport default function SpacexApp() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <MissionsContainer />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://spacexdata.herokuapp.com/graphql',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default client;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport client from './config';\nimport { ApolloProvider } from '@apollo/client';\nimport swDev from './swDev';\n\n\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client = {client}>\n    <App />\n    </ApolloProvider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nswDev();","export default function swDev() {\r\n    var nav: any = navigator;\r\n    let swDev: string = `${process.env.PUBLIC_URL}/sw.js`;\r\n  \r\n    console.log(swDev);\r\n  \r\n    if (\"serviceWorker\" in nav) {\r\n      nav.serviceWorker\r\n        .register(swDev)\r\n        .then((result: any) => console.log(\"result\", result))\r\n        .catch((err: any) => console.log(\"error view\", err));\r\n    }\r\n  }"],"sourceRoot":""}